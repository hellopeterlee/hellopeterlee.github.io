<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hellopeterlee.github.io</id>
    <title>Wukong&apos;s Sky</title>
    <updated>2021-10-03T01:27:58.984Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hellopeterlee.github.io"/>
    <link rel="self" href="https://hellopeterlee.github.io/atom.xml"/>
    <logo>https://hellopeterlee.github.io/images/avatar.png</logo>
    <icon>https://hellopeterlee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Wukong&apos;s Sky</rights>
    <entry>
        <title type="html"><![CDATA[让你的SSH通过HTTP代理或者SOCKS5代理]]></title>
        <id>https://hellopeterlee.github.io/post/rang-ni-de-ssh-tong-guo-http-dai-li-huo-zhe-socks5-dai-li/</id>
        <link href="https://hellopeterlee.github.io/post/rang-ni-de-ssh-tong-guo-http-dai-li-huo-zhe-socks5-dai-li/">
        </link>
        <updated>2021-10-03T01:13:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="socks5代理">socks5代理</h2>
<p>有时候你的SSH因为某些原因, 或者你的VPS的SSH端口被某些无法阻挡的力量被封禁了, 你使用普通的SSH方式无法登录你的服务器, 所以这时候我们需要使用一些方式, 让你的SSH通过代理链接你的服务器, 进而解决这个问题.</p>
<h2 id="直接配置">直接配置</h2>
<p>如何让你的ssh链接使用socks代理呢, 我们可以使用nc命令, 使用ssh的ProxyCommand配合nc可以让ssh通过你设置的代理访问服务器</p>
<pre><code>$ ssh -o ProxyCommand=&quot;nc -X 5 -x 127.0.0.1:1080 %h %p&quot; root@server
</code></pre>
<p>其中使用ProxyCommand命令, 带上具体内容nc -X 5 -x 127.0.0.1:1080 %h %p, 127.0.0.1:1080是你的代理实际地址和端口 最后边的root@server是你需要登录的服务器和用户名</p>
<p>nc命令的常用参数:</p>
<p>-X是指定代理协议</p>
<ul>
<li>
<p>4是socks4协议</p>
</li>
<li>
<p>5是socks5协议<br>
-x是指定代理服务器和端口[代理服务器:端口]</p>
</li>
<li>
<p>默认socks使用1080</p>
</li>
<li>
<p>HTTPS使用3128</p>
</li>
</ul>
<h3 id="alias">alias</h3>
<p>使用alias方式也可以:</p>
<p>打开你的.bashrc或者.zshrc配置alias</p>
<pre><code>$ vim ~/.bashrc

alias connserver=ssh -o ProxyCommand=&quot;nc -X 5 -x 127.0.0.1:1080 %h %p&quot; root@server
</code></pre>
<p>保存退出后输入一下:</p>
<pre><code>$ source ~/.bashrc
</code></pre>
<p>下次我们访问服务器的时候直接输入connserver就行</p>
<pre><code>$ connserver
</code></pre>
<h2 id="config方式">config方式</h2>
<p>我们也可以使用ssh的config配置</p>
<p>编辑ssh的配置文件, 没有这个文件的话, 自己创建一下:</p>
<pre><code>$ vim ~/.ssh/config
</code></pre>
<p>然后写入一些命令</p>
<pre><code>Host *
    ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p
</code></pre>
<p>下次使用ssh的时候就不需要配置代理了</p>
<h2 id="http代理">HTTP代理</h2>
<p>有时候你没有socks代理的时候, 我们借助corkscrew可以让ssh使用HTTP代理</p>
<p>由于我这里是macOS系统, 我就直接用brew安装corkscrew:</p>
<pre><code>$ brew install corkscrew
</code></pre>
<p>安装完成之后我们打开ssh的config文件修改成使用corkscrew的http代理方式:</p>
<pre><code>$ vim ~/.ssh/config
</code></pre>
<p>写入:</p>
<pre><code>ProxyCommand /usr/local/bin/corkscrew 127.0.0.1 8080 %h %p
</code></pre>
<p>/usr/local/bin/corkscrew是corkscrew的可执行文件路径, 如果您和我的不一样, 可以修改成正确的地址</p>
<p>127.0.0.1 8080是你的HTTP代理端口, 注意中间有空格, 保存退出后这个时候ssh可以通过你设置的http代理进行访问你的服务器了.</p>
<p>注意,这种方式生效是全局的, 可能会影响到你的git 使用ssh的方式clone或者push</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用OpenSSL工具生成密钥]]></title>
        <id>https://hellopeterlee.github.io/post/shi-yong-openssl-gong-ju-sheng-cheng-mi-yao/</id>
        <link href="https://hellopeterlee.github.io/post/shi-yong-openssl-gong-ju-sheng-cheng-mi-yao/">
        </link>
        <updated>2020-10-20T08:07:17.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://opendocs.alipay.com/open/291/106130">文章链接</a></p>
<h2 id="第一步-生成rsa密钥">第一步 生成RSA密钥</h2>
<p>首先进入OpenSSL工具，输入以下命令：</p>
<pre><code class="language-shell">OpenSSL&gt; genrsa -out app_private_key.pem   2048  #生成私钥

OpenSSL&gt; pkcs8 -topk8 -inform PEM -in app_private_key.pem -outform PEM -nocrypt -out app_private_key_pkcs8.pem #Java开发者需要将私钥转换成PKCS8格式

OpenSSL&gt; rsa -in app_private_key.pem -pubout -out app_public_key.pem #生成公钥

OpenSSL&gt; exit #退出OpenSSL程序
</code></pre>
<p>经过以上步骤，开发者可以在当前文件夹中（OpenSSL运行文件夹），看到:<br>
app_private_key.pem（开发者RSA私钥，非 Java 语言适用）、<br>
app_private_key_pkcs8.pem（pkcs8格式开发者RSA私钥，Java语言适用）和<br>
app_public_key.pem（开发者RSA公钥）3个文件。<br>
开发者将私钥保留，将公钥提交给支付宝配置到开发平台，用于验证签名。</p>
<p>以下为私钥文件和公钥文件示例。</p>
<p>TIPS：对于使用Java的开发者，需将生成的pkcs8格式的私钥去除头尾、换行和空格，作为私钥填入代码中，对于.NET和PHP的开发者来说，无需进行pkcs8命令行操作。</p>
<p>标准的私钥文件示例（PHP、.NET使用）</p>
<pre><code>-----BEGIN RSA PRIVATE KEY-----

MIICXQIBAAKBgQC+L0rfjLl3neHleNMOsYTW8r0QXZ5RVb2p/vvY3fJNNugvJ7lo4+fdBz+LN4mDxTz4MTOhi5e2yeAqx+v3nKpNmPzC5LmDjhHZURhwbqFtIpZD51mOfno2c3MDwlrsVi6mTypbNu4uaQzw/TOpwufSLWF7k6p2pLoVmmqJzQiD0QIDAQABAoGAakB1risquv9D4zX7hCv9MTFwGyKSfpJOYhkIjwKAik7wrNeeqFEbisqv35FpjGq3Q1oJpGkem4pxaLVEyZOHONefZ9MGVChT/MNH5b0FJYWl392RZy8KCdq376Vt4gKVlABvaV1DkapL+nLh7LMo/bENudARsxD55IGObMU19lkCQQDwHmzWPMHfc3kdY6AqiLrOss+MVIAhQqZOHhDe0aW2gZtwiWeYK1wB/fRxJ5esk1sScOWgzvCN/oGJLhU3kipHAkEAysNoSdG2oWADxlIt4W9kUiiiqNgimHGMHPwp4JMxupHMTm7D9XtGUIiDijZxunHv3kvktNfWj3Yji0661zHVJwJBAM8TDf077F4NsVc9AXVs8N0sq3xzqwQD/HPFzfq6hdR8tVY5yRMb4X7+SX4EDPORKKsgnYcur5lk8MUi7r072iUCQQC8xQvUne+fcdpRyrR4StJlQvucogwjTKMbYRBDygXkIlTJOIorgudFlrKP/HwJDoY4uQNl8gQJb/1LdrKwIe7FAkBl0TNtfodGrDXBHwBgtN/t3pyi+sz7OpJdUklKE7zMSBuLd1E3O4JMzvWP9wEE7JDb+brjgK4/cxxUHUTkk592

-----END RSA PRIVATE KEY-----
</code></pre>
<p>PKCS8处理后的私钥文件示例（Java使用）</p>
<pre><code>MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAN0yqPkLXlnhM+2H/57aHsYHaHXazr9pFQun907TMvmbR04wHChVsKVgGUF1hC0FN9hfeYT5v2SXg1WJSg2tSgk7F29SpsF0I36oSLCIszxdu7ClO7c22mxEVuCjmYpJdqb6XweAZzv4Is661jXP4PdrCTHRdVTU5zR9xUByiLSVAgMBAAECgYEAhznORRonHylm9oKaygEsqQGkYdBXbnsOS6busLi6xA+iovEUdbAVIrTCG9t854z2HAgaISoRUKyztJoOtJfI1wJaQU+XL+U3JIh4jmNx/k5UzJijfvfpT7Cv3ueMtqyAGBJrkLvXjiS7O5ylaCGuB0Qz711bWGkRrVoosPM3N6ECQQD8hVQUgnHEVHZYtvFqfcoq2g/onPbSqyjdrRu35a7PvgDAZx69Mr/XggGNTgT3jJn7+2XmiGkHM1fd1Ob/3uAdAkEA4D7aE3ZgXG/PQqlm3VbE/+4MvNl8xhjqOkByBOY2ZFfWKhlRziLEPSSAh16xEJ79WgY9iti+guLRAMravGrs2QJBAOmKWYeaWKNNxiIoF7/4VDgrcpkcSf3uRB44UjFSn8kLnWBUPo6WV+x1FQBdjqRviZ4NFGIP+KqrJnFHzNgJhVUCQFzCAukMDV4PLfeQJSmna8PFz2UKva8fvTutTryyEYu+PauaX5laDjyQbc4RIEMU0Q29CRX3BA8WDYg7YPGRdTkCQQCG+pjU2FB17ZLuKRlKEdtXNV6zQFTmFc1TKhlsDTtCkWs/xwkoCfZKstuV3Uc5J4BNJDkQOGm38pDRPcUDUh2/
</code></pre>
<p>公钥文件示例</p>
<pre><code>-----BEGIN PUBLIC KEY-----

MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQWiDVZ7XYxa4CQsZoB3n7bfxLDkeGKjyQPt2FUtm4TWX9OYrd523iw6UUqnQ+Evfw88JgRnhyXadp+vnPKP7unormYQAfsM/CxzrfMoVdtwSiGtIJB4pfyRXjA+KL8nIa2hdQy5nLfgPVGZN4WidfUY/QpkddCVXnZ4bAUaQjXQIDAQAB

-----END PUBLIC KEY-----
</code></pre>
<h2 id="第二步-处理应用公钥格式">第二步 处理应用公钥格式</h2>
<p>将公钥文件去除头尾、换行和空格，转成一行字符串。把该字符串提供给支付宝账号管理者，登录开放平台上传应用公钥并获取支付宝公钥，可以参考 <a href="https://opendocs.alipay.com/open/291/105971">如何获取支付宝公钥</a>。<br>
例如转换前公钥pem文件格式：</p>
<pre><code>-----BEGIN PUBLIC KEY-----

MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQWiDVZ7XYxa4CQsZoB3n7bfxLDkeGKjyQPt2FUtm4TWX9OYrd523iw6UUqnQ+Evfw88JgRnhyXadp+vnPKP7unormYQAfsM/CxzrfMoVdtwSiGtIJB4pfyRXjA+KL8nIa2hdQy5nLfgPVGZN4WidfUY/QpkddCVXnZ4bAUaQjXQIDAQAB

-----END PUBLIC KEY-----
</code></pre>
<p>转换后得到的字符串为：</p>
<pre><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQWiDVZ7XYxa4CQsZoB3n7bfxLDkeGKjyQPt2FUtm4TWX9OYrd523iw6UUqnQ+Evfw88JgRnhyXadp+vnPKP7unormYQAfsM/CxzrfMoVdtwSiGtIJB4pfyRXjA+KL8nIa2hdQy5nLfgPVGZN4WidfUY/QpkddCVXnZ4bAUaQjXQIDAQAB
</code></pre>
<h2 id="第三步-处理支付宝公钥格式针对文本读取方式">第三步 处理支付宝公钥格式(针对文本读取方式)</h2>
<p>上一步获取到支付宝公钥，用于支付宝返回数据的验签。</p>
<p>对于支付宝公钥，看到的是一个字符串，如下：</p>
<pre><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI6d306Q8fIfCOaTXyiUeJHkrIvYISRcc73s3vF1ZT7XN8RNPwJxo8pWaJMmvyTn9N4HQ632qJBVHf8sxHi/fEsraprwCtzvzQETrNRwVxLO5jVmRGi60j8Ue1efIlzPXV9je9mkjzOmdssymZkh2QhUrCmZYI/FCEa3/cNMW0QIDAQAB
</code></pre>
<p>如果需要使用文件方式（如PHP/.NET版本）读取支付宝公钥，需要在头尾加入标示后保存至文件，文件内容如下：</p>
<pre><code>-----BEGIN PUBLIC KEY-----

MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI6d306Q8fIfCOaTXyiUeJHkrIvYISRcc73s3vF1ZT7XN8RNPwJxo8pWaJMmvyTn9N4HQ632qJBVHf8sxHi/fEsraprwCtzvzQETrNRwVxLO5jVmRGi60j8Ue1efIlzPXV9je9mkjzOmdssymZkh2QhUrCmZYI/FCEa3/cNMW0QIDAQAB

-----END PUBLIC KEY-----
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dcat自定义RowAction,模拟确认，并弹出工具表单]]></title>
        <id>https://hellopeterlee.github.io/post/dcat-zi-ding-yi-rowactionmo-ni-que-ren-bing-dan-chu-gong-ju-biao-dan/</id>
        <link href="https://hellopeterlee.github.io/post/dcat-zi-ding-yi-rowactionmo-ni-que-ren-bing-dan-chu-gong-ju-biao-dan/">
        </link>
        <updated>2020-10-18T15:19:36.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>我的需求是要求点击表格的一个按钮后，先进行一段业务逻辑后再弹出一个表单填写后续内容，</li>
<li>由于正常的Dcat的RowAction，点击后的confirm，是监控不到取消事件的，所以这里不能使用RowAction里面的confirm，需要调用Dcat.confirm自己实现，弹出后，再访问RowAction里面的handle方法，处理完成后，再调用layer的弹窗，显示出表单</li>
</ul>
<blockquote>
<p>注意下面代码中的通过ajax访问handle方法</p>
</blockquote>
<pre><code class="language-php">&lt;?php

namespace App\StaffAdmin\Actions\Grid;

use App\Admin\Renderable\ShowOrderDetails;
use App\Jobs\MchOrderNotifyJob;
use App\Models\MchOrder;
use Dcat\Admin\Admin;
use Dcat\Admin\Grid\RowAction;
use Dcat\Admin\Traits\HasPermissions;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;

class GetOrderAction extends RowAction
{
    protected $title = '抢单';

    public function render()
    {
        $this-&gt;appendHtmlAttribute('style', 'margin:2px');
        $this-&gt;addHtmlClass('btn btn-primary');
        return parent::render();
    }

    // 发起请求之前回调，返回false可以中断请求
    protected function actionScript()
    {
        $url = admin_url(&quot;dcat-api/action&quot;);

        // 通过ajax访问handle方法,参数规定如下:
        $data = json_encode(['_action' =&gt; str_replace('\\','_',__CLASS__), '_id' =&gt; $this-&gt;getKey()]);

        $id = $this-&gt;getKey();
        $detailsUrl = admin_url(&quot;orders/submit/{$id}&quot;);

        return &lt;&lt;&lt;JS
            function onActionScript(data, target, action) {
                (typeof closeAutoRefresh != 'undefined') &amp;&amp; closeAutoRefresh();

                Dcat.confirm('确定抢单吗？', null, function () {
                    $.post(&quot;$url&quot;,$data,function(res){
                        console.info('res',res)
                        if(res.status){
                            if(res.data.type=='success'){
                                Dcat.success(res.data.message);
                                layer.open({
                                    type : 2,
                                    content:'{$detailsUrl}',
                                    area: [&quot;800px&quot;,&quot;600px&quot;],
                                    end: function(){
                                      parent &amp;&amp; parent.location.reload();
                                    }
                                })
                            }else{
                                Dcat.error(res.data.message)
                                (typeof openAutoRefresh != 'undefined') &amp;&amp; openAutoRefresh();
                            }
                        }else{
                            Dcat.error('抢单失败')
                            (typeof openAutoRefresh != 'undefined') &amp;&amp; openAutoRefresh();
                        }
                    })
                },function(){ //这里就是confirm的取消按钮点击后...
                    (typeof openAutoRefresh != 'undefined') &amp;&amp; openAutoRefresh();
                });
                return false
            }
JS;
    }

    public function showOrderDetails()
    {
        $id = $this-&gt;getKey();
        $url = admin_url(&quot;orders/submit/{$id}&quot;);

        return $this-&gt;response()-&gt;script(&lt;&lt;&lt;JS
            layer.open({
                type : 2,
                content:'{$url}',
                area: [&quot;800px&quot;,&quot;600px&quot;],
                end: function(){
                  parent &amp;&amp; parent.location.reload();
                }
            })
JS
        );
    }

    public function handle(Request $request)
    {
        try {
            $id = $request-&gt;get('_id');

            $res = MchOrder::query()
                -&gt;where('id', $id)
                -&gt;where('pay_status', MchOrder::PayStatus_Ready)
                -&gt;update(['pay_status' =&gt; MchOrder::PayStatus_Paying, 'staff_id' =&gt; Admin::user()-&gt;id]);

            if ($res &gt; 0) {
                return $this-&gt;response()-&gt;success('抢单成功');
            } else {
                return $this-&gt;response()-&gt;error(&quot;抢单失败:已被他人抢走&quot; . $id);
            }
        } catch (\Exception $e) {
            return $this-&gt;response()-&gt;error($e-&gt;getMessage());
        }
    }


    /**
     * @param Model|Authenticatable|HasPermissions|null $user
     *
     * @return bool
     */
    protected function authorize($user): bool
    {
        return true;
    }

    /**
     * @return array
     */
    protected function parameters()
    {
        return [];
    }
}

</code></pre>
<p>如果不需要监控confirm的取消事件，就简单多了</p>
<blockquote>
<p>response()-&gt;script就可以在handle处理完后执行js代码：</p>
</blockquote>
<pre><code class="language-php">&lt;?php

namespace App\StaffAdmin\Actions\Grid;

use App\Admin\Renderable\ShowOrderDetails;
use App\Jobs\MchOrderNotifyJob;
use App\Models\MchOrder;
use Dcat\Admin\Admin;
use Dcat\Admin\Grid\RowAction;
use Dcat\Admin\Traits\HasPermissions;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;

class GetOrderAction extends RowAction
{
    protected $title = '抢单';

    public function render()
    {
        $this-&gt;appendHtmlAttribute('style', 'margin:2px');
        $this-&gt;addHtmlClass('btn btn-primary');
        return parent::render();
    }

    public function showOrderDetails()
    {
        $id = $this-&gt;getKey();
        $url = admin_url(&quot;orders/submit/{$id}&quot;);

        return $this-&gt;response()-&gt;script(&lt;&lt;&lt;JS
            layer.open({
                type : 2,
                content:'{$url}',
                area: [&quot;800px&quot;,&quot;600px&quot;],
                end: function(){
                  parent &amp;&amp; parent.location.reload();
                }
            })
JS
        );
    }

    public function handle(Request $request)
    {
        try {
            $id = $this-&gt;getKey();

            $res = MchOrder::query()
                -&gt;where('id', $id)
                -&gt;where('pay_status', MchOrder::PayStatus_Ready)
                -&gt;update(['pay_status' =&gt; MchOrder::PayStatus_Paying, 'staff_id' =&gt; Admin::user()-&gt;id]);

            if ($res &gt; 0) {
                return $this-&gt;showOrderDetails();
            } else {
                return $this-&gt;response()-&gt;error(&quot;抢单失败:已被他人抢走&quot;);
            }
        } catch (\Exception $e) {
            return $this-&gt;response()-&gt;error($e-&gt;getMessage());
        }
    }

    /**
     * @return string|array|void
     */
    public function confirm()
    {
        return '确定抢单吗?';
    }

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一键搭建ssr + mtproxy_go + IPsec VPN server]]></title>
        <id>https://hellopeterlee.github.io/post/yi-jian-da-jian-ssr-mtproxy_go-ipsec-vpn-server/</id>
        <link href="https://hellopeterlee.github.io/post/yi-jian-da-jian-ssr-mtproxy_go-ipsec-vpn-server/">
        </link>
        <updated>2020-10-17T12:54:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ssr搭建">SSR搭建:</h2>
<pre><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh

chmod +x shadowsocksR.sh

./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log

/etc/init.d/shadowsocks start
</code></pre>
<p>开启加速：</p>
<pre><code>git clone -b master https://github.com/flyzy2005/ss-fly
ss-fly/ss-fly.sh -bbr
reboot

sysctl net.ipv4.tcp_available_congestion_control

显示成功：
net.ipv4.tcp_available_congestion_control = bbr cubic reno
</code></pre>
<h2 id="mtproxy_go搭建">MTProxy_go搭建</h2>
<pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/iiiiiii1/doubi/master/mtproxy_go.sh &amp;&amp; bash mtproxy_go.sh

/etc/init.d/mtproxy-go start
</code></pre>
<h2 id="ipsec-vpn-server搭建">IPsec VPN server搭建</h2>
<pre><code>wget https://git.io/vpnsetup-centos -O vpnsetup.sh &amp;&amp; sudo sh vpnsetup.sh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[玩客云搭建cups打印服务器]]></title>
        <id>https://hellopeterlee.github.io/post/wan-ke-yun-da-jian-cups-da-yin-fu-wu-qi/</id>
        <link href="https://hellopeterlee.github.io/post/wan-ke-yun-da-jian-cups-da-yin-fu-wu-qi/">
        </link>
        <updated>2020-10-17T12:46:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="相关命令">相关命令</h3>
<pre><code>apt-get update
apt-get upgrade
apt-get -y install cups avahi-daemon hplip
systemctl restart cups
</code></pre>
<p>vi /etc/cups/cupsd.conf</p>
<pre><code>#
# Configuration file for the CUPS scheduler.  See &quot;man cupsd.conf&quot; for a
# complete description of this file.
#

# Log general information in error_log - change &quot;warn&quot; to &quot;debug&quot;
# for troubleshooting...
LogLevel warn
PageLogFormat

# Deactivate CUPS' internal logrotating, as we provide a better one, especially
# LogLevel debug2 gets usable now
MaxLogSize 0

# Only listen for connections from the local machine.
Listen 631
Listen /run/cups/cups.sock

# Show shared printers on the local network.
Browsing On
BrowseLocalProtocols dnssd

# Default authentication type, when authentication is required...
DefaultAuthType Basic

# Web interface setting...
WebInterface Yes
DefaultEncryption Never
# Restrict access to the server...
&lt;Location /&gt;
  Order allow,deny
  Allow all
&lt;/Location&gt;

# Restrict access to the admin pages...
&lt;Location /admin&gt;
  Order allow,deny
  Allow all
&lt;/Location&gt;

# Restrict access to configuration files...
&lt;Location /admin/conf&gt;
  AuthType Default
  #Require user @SYSTEM
  Order allow,deny
&lt;/Location&gt;

# Restrict access to log files...
&lt;Location /admin/log&gt;
  AuthType Default
  #Require user @SYSTEM
  Order allow,deny
&lt;/Location&gt;

# Set the default printer/job policies...
&lt;Policy default&gt;
  # Job/subscription privacy...
  JobPrivateAccess default
  JobPrivateValues default
  SubscriptionPrivateAccess default
  SubscriptionPrivateValues default

  # Job-related operations must be done by the owner or an administrator...
  &lt;Limit Create-Job Print-Job Print-URI Validate-Job&gt;
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit Send-Document Send-URI Hold-Job Release-Job Restart-Job Purge-Jobs Set-Job-Attributes Create-Job-Subscription Renew-Subscription Cancel-Subscription Get-Notifications Reprocess-Job Cancel-Current-Job Suspend-Current-Job Resume-Job Cancel-My-Jobs Close-Job CUPS-Move-Job CUPS-Get-Document&gt;
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All administration operations require an administrator to authenticate...
  &lt;Limit CUPS-Add-Modify-Printer CUPS-Delete-Printer CUPS-Add-Modify-Class CUPS-Delete-Class CUPS-Set-Default CUPS-Get-Devices&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All printer operations require a printer operator to authenticate...
  &lt;Limit Pause-Printer Resume-Printer Enable-Printer Disable-Printer Pause-Printer-After-Current-Job Hold-New-Jobs Release-Held-New-Jobs Deactivate-Printer Activate-Printer Restart-Printer Shutdown-Printer Startup-Printer Promote-Job Schedule-Job-After Cancel-Jobs CUPS-Accept-Jobs CUPS-Reject-Jobs&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # Only the owner or an administrator can cancel or authenticate a job...
  &lt;Limit Cancel-Job CUPS-Authenticate-Job&gt;
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit All&gt;
    Order deny,allow
  &lt;/Limit&gt;
&lt;/Policy&gt;

# Set the authenticated printer/job policies...
&lt;Policy authenticated&gt;
  # Job/subscription privacy...
  JobPrivateAccess default
  JobPrivateValues default
  SubscriptionPrivateAccess default
  SubscriptionPrivateValues default

  # Job-related operations must be done by the owner or an administrator...
  &lt;Limit Create-Job Print-Job Print-URI Validate-Job&gt;
    AuthType Default
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit Send-Document Send-URI Hold-Job Release-Job Restart-Job Purge-Jobs Set-Job-Attributes Create-Job-Subscription Renew-Subscription Cancel-Subscription Get-Notifications Reprocess-Job Cancel-Current-Job Suspend-Current-Job Resume-Job Cancel-My-Jobs Close-Job CUPS-Move-Job CUPS-Get-Document&gt;
    AuthType Default
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All administration operations require an administrator to authenticate...
  &lt;Limit CUPS-Add-Modify-Printer CUPS-Delete-Printer CUPS-Add-Modify-Class CUPS-Delete-Class CUPS-Set-Default&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All printer operations require a printer operator to authenticate...
  &lt;Limit Pause-Printer Resume-Printer Enable-Printer Disable-Printer Pause-Printer-After-Current-Job Hold-New-Jobs Release-Held-New-Jobs Deactivate-Printer Activate-Printer Restart-Printer Shutdown-Printer Startup-Printer Promote-Job Schedule-Job-After Cancel-Jobs CUPS-Accept-Jobs CUPS-Reject-Jobs&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # Only the owner or an administrator can cancel or authenticate a job...
  &lt;Limit Cancel-Job CUPS-Authenticate-Job&gt;
    AuthType Default
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit All&gt;
    Order deny,allow
  &lt;/Limit&gt;
&lt;/Policy&gt;

# Set the kerberized printer/job policies...
&lt;Policy kerberos&gt;
  # Job/subscription privacy...
  JobPrivateAccess default
  JobPrivateValues default
  SubscriptionPrivateAccess default
  SubscriptionPrivateValues default

  # Job-related operations must be done by the owner or an administrator...
  &lt;Limit Create-Job Print-Job Print-URI Validate-Job&gt;
    AuthType Negotiate
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit Send-Document Send-URI Hold-Job Release-Job Restart-Job Purge-Jobs Set-Job-Attributes Create-Job-Subscription Renew-Subscription Cancel-Subscription Get-Notifications Reprocess-Job Cancel-Current-Job Suspend-Current-Job Resume-Job Cancel-My-Jobs Close-Job CUPS-Move-Job CUPS-Get-Document&gt;
    AuthType Negotiate
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All administration operations require an administrator to authenticate...
  &lt;Limit CUPS-Add-Modify-Printer CUPS-Delete-Printer CUPS-Add-Modify-Class CUPS-Delete-Class CUPS-Set-Default&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # All printer operations require a printer operator to authenticate...
  &lt;Limit Pause-Printer Resume-Printer Enable-Printer Disable-Printer Pause-Printer-After-Current-Job Hold-New-Jobs Release-Held-New-Jobs Deactivate-Printer Activate-Printer Restart-Printer Shutdown-Printer Startup-Printer Promote-Job Schedule-Job-After Cancel-Jobs CUPS-Accept-Jobs CUPS-Reject-Jobs&gt;
    AuthType Default
    #Require user @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  # Only the owner or an administrator can cancel or authenticate a job...
  &lt;Limit Cancel-Job CUPS-Authenticate-Job&gt;
    AuthType Negotiate
    #Require user @OWNER @SYSTEM
    Order deny,allow
  &lt;/Limit&gt;

  &lt;Limit All&gt;
    Order deny,allow
  &lt;/Limit&gt;
&lt;/Policy&gt;

</code></pre>
<blockquote>
<p>修改完配置文件后，记得重启一下服务：systemctl restart cups</p>
</blockquote>
<p>接下来安装hp的相关插件<br>
打开网址 [https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/]<br>
下载这两个文件：<br>
hplip-3.16.11-plugin.run，hplip-3.16.11-plugin.run.asc</p>
<pre><code>wget https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/hplip-3.16.11-plugin.run
wget https://www.openprinting.org/download/printdriver/auxfiles/HP/plugins/hplip-3.16.11-plugin.run.asc
</code></pre>
<p><code>sudo hp-plugin -i -g</code><br>
选择P选项，手动指定hplip-3.16.11-plugin.run位置<br>
选择y选项，确定安装这个插件</p>
<p>删除系统自动认出添加上的打印机，然后手动添加（系统会认出相应打印机，选中添加即可）</p>
]]></content>
    </entry>
</feed>